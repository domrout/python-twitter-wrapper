# Copyright 2012 Dominic Rout
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License 

account:
  doc: |
    Account-level configuration settings for users
  contains:
    rate_limit_status:
      doc: |
        Returns the remaining number of API requests available to the requesting
        user before the API limit is reached for the current hour. Calls to
        rate_limit_status do not count against the rate limit.
      url: account/rate_limit_status
      model: LimitStatus
    verify_credentials:
      model: User
      url: account/verify_credentials
      doc: |
        Returns an HTTP 200 OK response code and a representation of the requesting
        user if authentication was successful; returns a 401 status code and an error
        message if not.
    totals:
      url: account/totals
      doc: |
        Returns the current count of friends, followers, 
        updates (statuses) and favorites of the authenticating user.

statuses:
  model: Status
  contains:
    home_timeline:
      url: statuses/home_timeline
    mentions:
      url: statuses/mentions
    retweeted_by_me:
      url: statuses/retweeted_by_me
    retweeted_to_me:
      url: statuses/retweeted_to_me
    retweets_of_me:
      url: statuses/retweets_of_me
    user_timeline:
      url: statuses/user_timeline  
    retweeted_to_user:
      url: statuses/retweeted_to_user
      default_param: screen_name
    retweeted_by_user:
      url: statuses/retweeted_by_user
      default_param: screen_name
    show:
      url: statuses/show
      default_param: id
    update:
      post: true
      default_param: status
      url: statuses/update
    retweets: # Needs testing.
      model: Status
      default_param: id
      url: statuses/retweets/%(id)s
    retweeted_by:
      model: User
      default_param: id
      url: statuses/%(id)s/retweeted_by
      contains:
        ids:
          model: None
          url: statuses/%(id)s/retweeted_by/ids
    retweet:
      model: Status
      post: true
      url: statuses/retweet/%(id)s
      default_param: id

search:
  model: SearchResult
  url: search
  default_param: q

direct_messages:
  model: DirectMessage
  url: direct_messages
  doc: |
    Direct Messages are short, non-public messages sent between two users.
    Returns the 20 most recent direct messages sent to the authenticating user.
  contains:
    sent:
      doc: |
        Returns the 20 most recent direct messages sent by the authenticating user
      url: direct_messages/sent
    show:
      doc: |
        Returns a single direct message, specified by an id parameter
      url: direct_messages/show
      default_param: id
    destroy:
      doc: |
        Destroys the direct message specified in the required ID parameter. 
        The authenticating user must be the recipient of the specified direct message.
      url: direct_messages/destroy/%(id)s
      default_param: id
      post: true
    new:
      doc: |
        Sends a new direct message to the specified user from the authenticating user. 
        Requires both the user and text parameters. 
        Returns the sent message if successful.
      url: direct_messages/new
      example_params: "screen_name, text" 
      post: true


followers_ids:
  url: followers/ids

friends_ids:
  url: friends/ids

friendships:
  contains:
    exists:
      url: friendships/exists
      doc: |
        Test for the existence of friendship between two users. 
        Will return true if user_a follows user_b, otherwise will return false.
        The authenticating user must be a follower of the protected user.
        
        Users are identified using user_id_a and user_id_b or screen_name_a
        and screen_name_b
      example_params: "user_id_a, user_id_b"
    incoming:
      url: friendships/incoming
      doc: |
        Returns an array of numeric IDs for every user who has a pending request
        to follow the authenticating user.
    outgoing:
      url: friendships/outgoing
      doc: |
        Returns an array of numeric IDs for every protected user for whom the 
        authenticating user has a pending follow request.
    show:    
      url: friendships/show
      doc: |
        Returns detailed information about the relationship between two users.

    lookup:
      url: friendships/lookup
      doc: |
        Returns the relationship of the authenticating user to the comma separated 
        list of up to 100 screen_names or user_ids provided. Values for connections 
        can be: following, following_requested, followed_by, none.

    no_retweet_ids:
      url: friendships/no_retweet_ids
      doc: |
        Returns an array of user_ids that the currently authenticated user does not want
        to see retweets from.

users:
  model: User
  contains:
    lookup:
      url: users/lookup
      default_param: screen_name
    search:
      url: users/search
      default_param: q
    show:
      url: users/show
      default_param: screen_name
    contributees:
      url: users/contributees
      default_param: screen_name
    contributors:
      url: users/contributors
      default_param: screen_name
    suggestions:
      url: users/suggestions
      model: SuggestionCategory

favorites:
  model: Status
  url: favorites
  doc: | 
    Returns the 20 most recent favorite statuses for the authenticating user or 
    user specified by the ID parameter.
  contains:
    create:
      post: true
      url: favorites/create/%(id)s
      default_param: id
      doc: |
        Favorites the status specified in the ID parameter as the authenticating user.
        Returns the favorite status when successful. 
        This process invoked by this method is asynchronous.
    destroy:
      post: true
      url: favorites/destroy/%(id)s
      default_param: id
      doc: |
        Un-favorites the status specified in the ID parameter as the authenticating user.
        Returns the un-favorited status in the requested format when successful.
        This process invoked by this method is asynchronous.

lists:
  model: List
  url: lists
  contains: 
    all: 
      url: lists/all
      doc: |
        Returns all lists the authenticating or specified user subscribes to, including their own.
        The user is specified using the user_id or screen_name parameters. 
        If no user is given, the authenticating user is used.
    statuses: 
      url: lists/statuses
      default_param: list_id
      doc: | 
        Returns tweet timeline for members of the specified list.
        Historically, retweets were not available in list timeline responses but you can now use
        the include_rts=true parameter to additionally receive retweet objects.
    destroy: 
      url: lists/destroy
      post: true
      default_param: list_id
      doc: |
        Deletes the specified list. The authenticated user must own the list to be able to 
        destroy it.
    memberships:
      url: lists/memberships
      default_param: screen_name
      doc: | 
        Returns the lists the specified user has been added to. If user_id or screen_name are not
        provided the memberships for the authenticating user are returned.
    subscribers:
      url: lists/subscribers
      model: User
      contains:
        show:
          url: lists/subscribers/show 
          doc: |
            Check if the specified user is a subscriber of the specified list. 
            Returns the user if they are subscriber.
      doc: |
        Returns the subscribers of the specified list. Private list subscribers will only be 
        shown if the authenticated user owns the specified list.
    members:
      url: lists/members
      model: User
      contains:
        show:
          url: lists/members/show 
          default_param: user_id
    subscriptions:
      url: lists/subscriptions
      default_param: user_id
    show:
      url: lists/show
      default_param: list_id

Status:
  retweeted_by:
    model: User
    url: statuses/%(id)s/retweeted_by
    contains:
      ids:
        model: None
        url: statuses/%(id)s/retweeted_by/ids
  retweets:
    model: Status
    url: statuses/retweets/%(id)s
  reply:
    model: Status
    post: true
    default_param: status
    url: statuses/update
    container_id: in_reply_to_status_id
    doc: Post a reply to the public status - reply element will be ignored unless you @mention the original poster.
  destroy:
    model: Status
    post: true
    url: statuses/destroy
    container_id: id
    doc: Destroys the status specified by the required ID parameter. The authenticating user must be the author of the specified status. Returns the destroyed status if successful.
  retweet:
    model: Status
    post: true
    url: statuses/retweet/%(id)s
    container_id: id
  favorite:
    post: true
    url: favorites/create/%(id)s
    container_id: id
    model: Status
    doc: |
      Favorites the status specified as the authenticating user.
      Returns the favorite status when successful. 
      This process invoked by this method is asynchronous.
  unfavourite:
    post: true
    url: favorites/destroy/%(id)s
    model: Status
    container_id: id
    doc: |
      Unfavorites the status specified as the authenticating user.
      This process invoked by this method is asynchronous.


List:
  statuses:
    container_id: list_id 
    url: lists/statuses
    model: Status
  subscribers:
    container_id: list_id 
    url: lists/subscribers
    model: User
    contains:
      show:
        url: lists/subscribers/show 
  members:
    container_id: list_id 
    url: lists/members
    model: User
    contains:
      show:
        url: lists/members/show 

SuggestionCategory:
  users: 
    url: users/suggestions/%(slug)s
    model: User
  members: 
    url: users/suggestions/%(slug)s/members
    model: User

User:
  lists:
    model: List
    container_id: user_id
    contains:
      subscriptions:
        url: lists/subscriptions



# GET trends/:woeid Returns the top 10 trending topics for a specific WOEID, if trending information is available for it. The response is an array of "trend" objects that encode the name of the trending topic, the query parameter that can be used to search for the topic on Twitter Search, and the Twitter Search URL....

# GET trends/available  Returns the locations that Twitter has trending topic information for. The response is an array of "locations" that encode the location's WOEID and some other human-readable information such as a canonical name and country the location belongs in. A WOEID is a Yahoo! Where On Earth ID.

# GET trends/daily  Returns the top 20 trending topics for each hour in a given day.

# GET trends/weekly Returns the top 30 trending topics for each day in a given week.Block

# GET blocks/blocking Returns an array of user objects that the authenticating user is blocking. Consider using GET blocks/blocking/ids with GET users/lookup instead of this method.

# GET blocks/blocking/ids Returns an array of numeric user ids the authenticating user is blocking.

# GET blocks/exists Returns if the authenticating user is blocking a target user. Will return the blocked user's object if a block exists, and error with a HTTP 404 response code otherwise.

# GET oauth/authenticate  Allows a Consumer application to use an OAuth request_token to request user authorization. This method is a replacement of Section 6.2 of the OAuth 1.0 authentication flow for applications using the You do not have access to view this node authentication flow. The method will use the currently...

# GET oauth/authorize Allows a Consumer application to use an OAuth Request Token to request user authorization. This method fulfills Section 6.2 of the OAuth 1.0 authentication flow. Desktop applications must use this method (and cannot use GET oauth/authenticate). Please use HTTPS for this method, and all other OAuth...

# GET help/test Returns the string "ok" in the requested format with a 200 OK HTTP status code. This method is great for sending a HEAD request to determine our servers current time.

# GET help/configuration  Returns the current configuration used by Twitter including twitter.com slugs which are not usernames, maximum photo resolutions, and t.co URL lengths. It is recommended applications request this endpoint when they are loaded, but no more than once a day.

# GET help/languages  Returns the list of languages supported by Twitter along with their ISO 639-1 code. The ISO 639-1 code is the two letter value to use if you include lang with any of your requests.Legal




# GET legal/privacy Returns Twitter's Privacy Policy in the requested format.

# GET legal/tos Returns the Twitter Terms of Service in the requested format. These are not the same as the Developer Rules of the Road.
