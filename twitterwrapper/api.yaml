# Copyright 2012 Dominic Rout
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License 

account:
  contains:
    rate_limit_status:
      url: account/rate_limit_status
      model: LimitStatus
    verify_credentials:
      model: User
      url: account/verify_credentials
    totals:
      url: account/totals
      doc: See total tweets etc

statuses:
  model: Status
  contains:
    home_timeline:
      url: statuses/home_timeline
    mentions:
      url: statuses/mentions
    retweeted_by_me:
      url: statuses/retweeted_by_me
    retweeted_to_me:
      url: statuses/retweeted_to_me
    retweets_of_me:
      url: statuses/retweets_of_me
    user_timeline:
      url: statuses/user_timeline  
    retweeted_to_user:
      url: statuses/retweeted_to_user
      default_param: screen_name
    retweeted_by_user:
      url: statuses/retweeted_by_user
      default_param: screen_name
    show:
      url: statuses/show
      default_param: id
    update:
      post: true
      default_param: status
      url: statuses/update
    retweets: # Needs testing.
      model: Status
      default_param: id
      url: statuses/retweets/%(id)s
    retweeted_by:
      model: User
      default_param: id
      url: statuses/%(id)s/retweeted_by
      contains:
        ids:
          model: None
          url: statuses/%(id)s/retweeted_by/ids
    retweet:
      model: Status
      post: true
      url: statuses/retweet/%(id)s
      default_param: id

search:
  model: SearchResult
  url: search
  default_param: q

direct_messages:
  model: DirectMessage
  url: direct_messages
  contains:
    sent:
      url: direct_messages/sent
    show:
      url: direct_messages/show
      default_param: id

followers_ids:
  url: followers/ids

friends_ids:
  url: friends/ids

users:
  model: User
  contains:
    lookup:
      url: users/lookup
      default_param: screen_name
    search:
      url: users/search
      default_param: q
    show:
      url: users/show
      default_param: screen_name
    contributees:
      url: users/contributees
      default_param: screen_name
    contributors:
      url: users/contributors
      default_param: screen_name
    suggestions:
      url: users/suggestions
      model: SuggestionCategory

favourites:
  model: Status
  url: favourites

lists:
  model: List
  url: lists
  contains: 
    all: 
      url: lists/all
    statuses: 
      url: lists/statuses
      default_param: list_id
    memberships:
      url: lists/memberships
      default_param: screen_name
    subscribers:
      url: lists/subscribers
      model: User
      contains:
        show:
          url: lists/subscribers/show 
    members:
      url: lists/members
      model: User
      contains:
        show:
          url: lists/members/show 
          default_param: user_id
    subscriptions:
      url: lists/subscriptions
      default_param: user_id
    show:
      url: lists/show
      default_param: list_id

Status:
  retweeted_by:
    model: User
    url: statuses/%(id)s/retweeted_by
    contains:
      ids:
        model: None
        url: statuses/%(id)s/retweeted_by/ids
  retweets:
    model: Status
    url: statuses/retweets/%(id)s
  reply:
    model: Status
    post: true
    default_param: status
    url: statuses/update
    container_id: in_reply_to_status_id
    doc: Post a reply to the public status - reply element will be ignored unless you @mention the original poster.
  destroy:
    model: Status
    post: true
    url: statuses/destroy
    container_id: id
    doc: Destroys the status specified by the required ID parameter. The authenticating user must be the author of the specified status. Returns the destroyed status if successful.
  retweet:
    model: Status
    post: true
    url: statuses/retweet/%(id)s
    container_id: id

List:
  statuses:
    container_id: list_id 
    url: lists/statuses
    model: Status
  subscribers:
    container_id: list_id 
    url: lists/subscribers
    model: User
    contains:
      show:
        url: lists/subscribers/show 
  members:
    container_id: list_id 
    url: lists/members
    model: User
    contains:
      show:
        url: lists/members/show 

SuggestionCategory:
  users: 
    url: users/suggestions/%(slug)s
    model: User
  members: 
    url: users/suggestions/%(slug)s/members
    model: User

User:
  lists:
    model: List
    container_id: user_id
    contains:
      subscriptions:
        url: lists/subscriptions


# GET friendships/exists  Test for the existence of friendship between two users. Will return true if user_a follows user_b, otherwise will return false. Authentication is required if either user A or user B are protected. Additionally the authenticating user must be a follower of the protected user. Consider using...

# GET friendships/incoming  Returns an array of numeric IDs for every user who has a pending request to follow the authenticating user.

# GET friendships/outgoing  Returns an array of numeric IDs for every protected user for whom the authenticating user has a pending follow request.

# GET friendships/show  Returns detailed information about the relationship between two users.

# GET friendships/lookup  Returns the relationship of the authenticating user to the comma separated list of up to 100 screen_names or user_ids provided. Values for connections can be: following, following_requested, followed_by, none.

# GET friendships/no_retweet_ids  Returns an array of user_ids that the currently authenticated user does not want to see retweets from.Users


# GET trends/:woeid Returns the top 10 trending topics for a specific WOEID, if trending information is available for it. The response is an array of "trend" objects that encode the name of the trending topic, the query parameter that can be used to search for the topic on Twitter Search, and the Twitter Search URL....

# GET trends/available  Returns the locations that Twitter has trending topic information for. The response is an array of "locations" that encode the location's WOEID and some other human-readable information such as a canonical name and country the location belongs in. A WOEID is a Yahoo! Where On Earth ID.

# GET trends/daily  Returns the top 20 trending topics for each hour in a given day.

# GET trends/weekly Returns the top 30 trending topics for each day in a given week.Block

# GET blocks/blocking Returns an array of user objects that the authenticating user is blocking. Consider using GET blocks/blocking/ids with GET users/lookup instead of this method.

# GET blocks/blocking/ids Returns an array of numeric user ids the authenticating user is blocking.

# GET blocks/exists Returns if the authenticating user is blocking a target user. Will return the blocked user's object if a block exists, and error with a HTTP 404 response code otherwise.

# GET oauth/authenticate  Allows a Consumer application to use an OAuth request_token to request user authorization. This method is a replacement of Section 6.2 of the OAuth 1.0 authentication flow for applications using the You do not have access to view this node authentication flow. The method will use the currently...

# GET oauth/authorize Allows a Consumer application to use an OAuth Request Token to request user authorization. This method fulfills Section 6.2 of the OAuth 1.0 authentication flow. Desktop applications must use this method (and cannot use GET oauth/authenticate). Please use HTTPS for this method, and all other OAuth...

# GET help/test Returns the string "ok" in the requested format with a 200 OK HTTP status code. This method is great for sending a HEAD request to determine our servers current time.

# GET help/configuration  Returns the current configuration used by Twitter including twitter.com slugs which are not usernames, maximum photo resolutions, and t.co URL lengths. It is recommended applications request this endpoint when they are loaded, but no more than once a day.

# GET help/languages  Returns the list of languages supported by Twitter along with their ISO 639-1 code. The ISO 639-1 code is the two letter value to use if you include lang with any of your requests.Legal




# GET legal/privacy Returns Twitter's Privacy Policy in the requested format.

# GET legal/tos Returns the Twitter Terms of Service in the requested format. These are not the same as the Developer Rules of the Road.
